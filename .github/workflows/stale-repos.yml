on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  pull_request:
    paths:
      - 'configs/*.json'

name: Check Stale Repos

jobs:
  matrix:
    name: Find stale repositories
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: repos
        name: find repositories to check
        run: |
          # retrieves names of target repositories per JSON config file
          # returns a JSON object with the following schema:
          #  { "$JSON_CONFIG_FILE_PATH": ["$GITHUB_REPOSITORY_FULL_NAME"] }
          repos="$(jq '{"\(input_filename)":(.repositories | map(.target))}' configs/*.json | jq -sc 'add')"

          if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            # resets the checkout to PR target commit
            git fetch origin ${{ github.event.pull_request.base.sha }}
            git reset --hard ${{ github.event.pull_request.base.sha }}
            # retrieves names of target repositories per JSON config file
            #  on PR target commit
            base="$(jq '{"\(input_filename)":(.repositories | map(.target))}' configs/*.json | jq -sc 'add')"
            # removes names of target repositories that were present in JSON config files
            #  on PR target commit from the JSON object created on PR head commit
            repos="$(jq -nc '$head | to_entries | map({"key":"\(.key)","value":(.value - ($base["\(.key)"] // []))}) | from_entries' --argjson head "$repos" --argjson base "$base")"
          fi

          echo "::set-output name=this::$repos"
      - name: find deleted / archived repositories
        run: |
          status=0
          while read config; do
            echo "::group::$config"
            while read repo; do
              exists=true
              output=$(curl -s -f -H "Accept: application/vnd.github.v3+json" -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$repo") || exists=false
              if ! $exists; then
                echo "Repository $repo does not exist."
                status=1
                continue
              fi
              if [[ $(echo "$output" | jq ".archived") == "true" ]]; then
                echo "Repository $repo is archived."
                status=1
              fi
            done <<< "$(jq -r '.["\($key)"][]' --arg key "$config" <<< '${{ steps.repos.outputs.this }}')"
            echo "::endgroup::"
          done <<< "$(jq -r 'keys[]' <<< '${{ steps.repos.outputs.this }}')"
          exit $status
